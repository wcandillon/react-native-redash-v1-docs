(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{Qf1I:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return c}));t("4cIV"),t("NZyX"),t("c0Gx"),t("QNbk"),t("+ytS"),t("WY76");var a=t("V0Ug"),r=t("sN0p");t("xH0s");function b(){return(b=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/animations.mdx"}});var i={_frontmatter:l},o=r.a;function c(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},b=Object.keys(e);for(a=0;a<b.length;a++)t=b[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(o,b({},i,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"animations"},"Animations"),Object(a.b)("hr",null),Object(a.b)("h2",{id:"usevalues"},Object(a.b)("inlineCode",{parentName:"h2"},"useValues()")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-tsx"}),"const useValues: <V extends string | number | boolean>(values: V[], deps: Dependencies) => Animated.Value<V>[];\n")),Object(a.b)("p",null,"Create animation values which lifecycle is granted by ",Object(a.b)("inlineCode",{parentName:"p"},"deps"),".\nFor instance the code snippet below:"),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-tsx"}),"const [toggle, state] = useValues([0, State.UNDETERMINED], []);\n")),Object(a.b)("p",null,"is a shortcut for"),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-tsx"}),"const [toggle state] = useMemoOne(() => [new Value(0), new Value(State.UNDETERMINED)], []);\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"usediff"},Object(a.b)("inlineCode",{parentName:"h2"},"useDiff()")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-tsx"}),"const useDiff: (node: Animated.Node<number>, deps: Dependencies) => Animated.Value<number>;\n")),Object(a.b)("p",null,"Returns a difference between the node value from the last frame and the current one.\n",Object(a.b)("inlineCode",{parentName:"p"},"useDiff")," works for every frame whereas ",Object(a.b)("inlineCode",{parentName:"p"},"diff")," works on every evaluation."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"snappoint"},Object(a.b)("inlineCode",{parentName:"h2"},"snapPoint()")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-tsx"}),"const snapPoint: (value: Animated.Adaptable<number>, velocity: Animated.Adaptable<number>, points: Animated.Adaptable<number>[]) => Animated.Adaptable<number>;\n")),Object(a.b)("p",null,"Select a point based on a node value and its velocity."),Object(a.b)("h2",{id:"binterpolate"},Object(a.b)("inlineCode",{parentName:"h2"},"bInterpolate")),Object(a.b)("pre",null,Object(a.b)("code",b({parentName:"pre"},{className:"language-tsx"}),"const bInterpolate: (value: Animated.Adaptable<number>, origin: Animated.Adaptable<number>, destination: Animated.Adaptable<number>) => Animated.Node<number>;\n")),Object(a.b)("p",null,"Interpolate the node from 0 to 1 without clamping."))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/animations.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-animations-mdx-48d559cc279a7b342075.js.map