{"version":3,"sources":["webpack:///../src/colors.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,gMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,UADR,UAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,8RAkBL,2BACA,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0KAQL,gEACA,2BACA,iBAAQ,CACN,GAAM,WACL,0BAAYA,WAAW,MAAvB,cACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kOAQL,iEACA,uBACA,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,uBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0JAIL,uBACA,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,wBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2KAIL,uBACA,iBAAQ,CACN,GAAM,sBACL,0BAAYA,WAAW,MAAvB,yBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wKAQL,gCAAe,0BAAYA,WAAW,KAAvB,kBAAf,eAAyF,0BAAYA,WAAW,KAAvB,wBAAzF,kE,8LAKJJ,EAAWK,gBAAiB","file":"component---src-colors-mdx-b6959a506bfa148429fc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/react-native-redash/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// Interpolate in RGB color space (default)\ninterpolateColor(node, {\n  inputRange: [0, 100],\n  outputRange: [\"blue\", \"red\"]\n});\n\n// Interpolate in HSV color space\ninterpolateColor(\n  node,\n  {\n    inputRange: [0, 1],\n    outputRange: [\"blue\", \"red\"]\n  },\n  \"hsv\"\n);\n`}</code></pre>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"hsv2color\"\n    }}><inlineCode parentName=\"h2\">{`hsv2color()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const hsv2color: (\n  h: Animated.Adaptable<number>,\n  s: Animated.Adaptable<number>,\n  v: Animated.Adaptable<number>\n) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Convert an HSV color into a color node.`}</p>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"hsv2rgb\"\n    }}><inlineCode parentName=\"h2\">{`hsv2rgb()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const hsv2rgb: (\n  h: Animated.Adaptable<number>,\n  s: Animated.Adaptable<number>,\n  v: Animated.Adaptable<number>\n) => { r: Animated.Node<number>, g: Animated.Node<number>, b: Animated.Node<number>};\n`}</code></pre>\n    <p>{`Convert an HSV color into an rgb object.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"interpolatecolor\"\n    }}><inlineCode parentName=\"h2\">{`interpolateColor()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const interpolateColor: (value: Animated.Adaptable<number>, config: ColorInterpolationConfig, colorSpace?: \"hsv\" | \"rgb\") => Animated.Node<number>;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"binterpolatecolor\"\n    }}><inlineCode parentName=\"h2\">{`bInterpolateColor()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const bInterpolateColor: (value: Animated.Adaptable<number>, color1: string | number, color2: string | number, colorSpace?: \"hsv\" | \"rgb\") => Animated.Node<number>;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"colorforbackground\"\n    }}><inlineCode parentName=\"h2\">{`colorForBackground()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const colorForBackground = (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n) Animated.Node<number>;\n`}</code></pre>\n    <p>{`Returns `}<inlineCode parentName=\"p\">{`color(0, 0, 0)`}</inlineCode>{` (black) or `}<inlineCode parentName=\"p\">{`color(255, 255, 255)`}</inlineCode>{` (white) depending on the value of the background color.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}