(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{GzyG:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return o})),a.d(n,"default",(function(){return s}));a("4cIV"),a("NZyX"),a("c0Gx"),a("QNbk"),a("+ytS"),a("WY76");var t=a("V0Ug"),r=a("sN0p");a("xH0s");function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/coordinates.mdx"}});var i={_frontmatter:o},b=r.a;function s(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(t.b)(b,c({},i,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",{id:"coordinates"},"Coordinates"),Object(t.b)("p",null,"In order to easily build certain types of animations, it can be extremely useful to switch from one coordinate system to another."),Object(t.b)("p",null,"For instance, to convert a ",Object(t.b)("inlineCode",{parentName:"p"},"x")," and ",Object(t.b)("inlineCode",{parentName:"p"},"y")," coordinate from the React Native canvas to a polar coordinate system centered at ",Object(t.b)("inlineCode",{parentName:"p"},"x = 100")," and ",Object(t.b)("inlineCode",{parentName:"p"},"y = 100"),":"),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"const x = 0;\nconst y = 100;\nconst center = { x: 100, y: 100 };\nconst {theta, radius} = cartesian2Polar(\n  canvas2Cartesian({ x, y }, center)\n);\n// theta is Ï€, radius: 100\n")),Object(t.b)("h2",{id:"interfaces"},"Interfaces"),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"export interface Point {\n    x: Animated.Adaptable<number>;\n    y: Animated.Adaptable<number>;\n}\n\nexport interface PolarPoint {\n    theta: Animated.Adaptable<number>;\n    radius: Animated.Adaptable<number>;\n}\n")),Object(t.b)("hr",null),Object(t.b)("h2",{id:"canvas2cartesian"},Object(t.b)("inlineCode",{parentName:"h2"},"canvas2Cartesian()")),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"export declare const canvas2Cartesian: ({ x, y }: Point, center: Point) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n")),Object(t.b)("hr",null),Object(t.b)("h2",{id:"cartesian2canvas"},Object(t.b)("inlineCode",{parentName:"h2"},"cartesian2Canvas()")),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"export declare const cartesian2Canvas: ({ x, y }: Point, center: Point) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n")),Object(t.b)("hr",null),Object(t.b)("h2",{id:"cartesian2polar"},Object(t.b)("inlineCode",{parentName:"h2"},"cartesian2Polar()")),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"export declare const cartesian2Polar: ({ x, y }: Point) => {\n    theta: Animated.Node<number>;\n    radius: Animated.Node<number>;\n};\n")),Object(t.b)("hr",null),Object(t.b)("h2",{id:"polar2cartesian"},Object(t.b)("inlineCode",{parentName:"h2"},"polar2Cartesian()")),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"export declare const polar2Cartesian: ({ theta, radius }: PolarPoint) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n")),Object(t.b)("hr",null),Object(t.b)("h2",{id:"polar2canvas"},Object(t.b)("inlineCode",{parentName:"h2"},"polar2Canvas()")),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"export declare const polar2Canvas: ({ theta, radius }: PolarPoint, center: Point) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n")),Object(t.b)("h2",{id:"canvas2polar"},Object(t.b)("inlineCode",{parentName:"h2"},"canvas2Polar()")),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-tsx"}),"export declare const canvas2Polar: ({ x, y }: Point, center: Point) => {\n    theta: Animated.Node<number>;\n    radius: Animated.Node<number>;\n};\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/coordinates.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-coordinates-mdx-0bdf8fb77de3c933ce7f.js.map