{"version":3,"sources":["webpack:///../src/run-animations.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,wMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBACA,iBAAQ,CACN,GAAM,UACL,0BAAYC,WAAW,MAAvB,aACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gSAWL,wFAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4FASL,uBACA,iBAAQ,CACN,GAAM,SACL,0BAAYA,WAAW,MAAvB,YACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mQAUL,uEACA,iBAAQ,CACN,GAAM,UACL,0BAAYA,WAAW,MAAvB,aACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gRAWL,wEACA,iBAAQ,CACN,GAAM,SACL,0BAAYA,WAAW,MAAvB,YACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6FAIL,mFAAkE,0BAAYA,WAAW,KAAvB,YAAlE,wCAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iCAIL,iBAAQ,CACN,GAAM,QACL,0BAAYA,WAAW,MAAvB,WACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8OAWL,gEAA+C,0BAAYA,WAAW,KAAvB,KAA/C,OAAoG,0BAAYA,WAAW,KAAvB,KAApG,2BAA6K,0BAAYA,WAAW,KAAvB,YAA7K,yBAA2P,0BAAYA,WAAW,KAAvB,aAA3P,qBAAsU,0BAAYA,WAAW,KAAvB,QAAtU,6BAAoZ,0BAAYA,WAAW,KAAvB,KAApZ,OAAyc,0BAAYA,WAAW,KAAvB,KAAzc,kBAAygB,0BAAYA,WAAW,KAAvB,KAAzgB,OAA8jB,0BAAYA,WAAW,KAAvB,KAA9jB,uCAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2G,sMASTJ,EAAWK,gBAAiB","file":"component---src-run-animations-mdx-021ed96dedc86d629e33.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/tmp/react-native-redash/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"run-animations\"\n    }}>{`Run Animations`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"timing\"\n    }}><inlineCode parentName=\"h2\">{`timing()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface TimingParams {\n    clock?: Animated.Clock;\n    from?: Animated.Adaptable<number>;\n    to?: Animated.Adaptable<number>;\n    duration?: Animated.Adaptable<number>;\n    easing?: Animated.EasingFunction;\n}\nconst timing: (params: TimingParams) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Convenience function to run a timing animation.\nExample usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`timing({\n  duration: 10 * 1000,\n  from: 0,\n  to: 1,\n  easing: Easing.linear,\n});\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"decay\"\n    }}><inlineCode parentName=\"h2\">{`decay()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export interface DecayParams {\n    clock?: Animated.Clock;\n    from?: Animated.Adaptable<number>;\n    velocity?: Animated.Value<number>;\n    deceleration?: Animated.Adaptable<number>;\n}\nconst decay: (params: DecayParams) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Convenience function to run a decay animation.`}</p>\n    <h2 {...{\n      \"id\": \"spring\"\n    }}><inlineCode parentName=\"h2\">{`spring()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface SpringParams {\n    clock?: Animated.Clock;\n    from?: Animated.Adaptable<number>;\n    to: Animated.Adaptable<number>;\n    velocity?: Animated.Value<number>;\n    config?: SpringConfig;\n}\nconst spring: (params: SpringParams) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Convenience function to run a spring animation.`}</p>\n    <h2 {...{\n      \"id\": \"delay\"\n    }}><inlineCode parentName=\"h2\">{`delay()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const delay: (node: Animated.Node<number>, duration: number) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Evaluate an animation node after a certain amount of time. `}<inlineCode parentName=\"p\">{`duration`}</inlineCode>{` is in milliseconds.\nExample usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`delay(set(value, 1), 250);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"loop\"\n    }}><inlineCode parentName=\"h2\">{`loop()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface LoopProps {\n    clock?: Animated.Clock;\n    easing?: Animated.EasingFunction;\n    duration?: number;\n    boomerang?: boolean;\n    autoStart?: boolean;\n}\nconst loop: (loopConfig: LoopProps) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Returns an animated node that goes from `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` during the time set by `}<inlineCode parentName=\"p\">{`duration`}</inlineCode>{` continuously. If the `}<inlineCode parentName=\"p\">{`boomerang`}</inlineCode>{` option is set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, the animation goes from `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and then from `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` in the next cycle.\nExample usage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const progress = new Value(0);\nset(progress, loop({ duration: 400, easing: Easing.linear }));\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}