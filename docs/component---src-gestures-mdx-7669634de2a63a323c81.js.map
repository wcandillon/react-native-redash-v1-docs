{"version":3,"sources":["webpack:///../src/gestures.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,kMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,uBACA,iBAAQ,CACN,GAAM,cACL,0BAAYC,WAAW,MAAvB,iBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+JAIL,iIACA,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,sBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oKAIL,kKACyB,0BAAYA,WAAW,KAAvB,cADzB,2MAGA,uBACA,iBAAQ,CACN,GAAM,iBACL,0BAAYA,WAAW,MAAvB,oBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qLAOL,+EACA,qDAAoC,0BAAYA,WAAW,KAAvB,cAApC,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4EAIL,kDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uFAIL,uBACA,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,qBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0yBAOL,gIAC2B,0BAAYA,WAAW,KAAvB,qBAD3B,KAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4M,yLAWTJ,EAAWK,gBAAiB","file":"component---src-gestures-mdx-7669634de2a63a323c81.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/react-native-redash/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"gestures\"\n    }}>{`Gestures`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"withoffset\"\n    }}><inlineCode parentName=\"h2\">{`withOffset()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const withOffset: (value: Animated.Node<number>, state: Animated.Value<State>, offset?: Animated.Value<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Decorates animated value from the pan gesture handler so that its position is memorized accross touches.`}</p>\n    <h2 {...{\n      \"id\": \"withscaleoffset\"\n    }}><inlineCode parentName=\"h2\">{`withScaleOffset()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const withScaleOffset: (value: Animated.Node<number>, state: Animated.Value<State>, offset?: Animated.Value<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Decorates animated value from the pinch gesture handler so that its scale value is memorized accross touches.\nThis function differs from `}<inlineCode parentName=\"p\">{`withOffset`}</inlineCode>{` because it uses multiplication instead of additions.\nTranslations start from 0 and are added on top of each other whereas scale transformations start from 1 and are multiplied on top of each other.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"onscrollevent\"\n    }}><inlineCode parentName=\"h2\">{`onScrollEvent()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const onScrollEvent: (contentOffset: {\n    x?: Animated.Node<number> | undefined;\n    y?: Animated.Node<number> | undefined;\n}) => (...args: any[]) => void;\n`}</code></pre>\n    <p>{`Returns a reanimated event handler for the ScrollView.`}</p>\n    <p>{`Example usage for a vertical `}<inlineCode parentName=\"p\">{`ScrollView`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Animated.ScrollView onScroll={onScrollEvent({ y: new Value(0) })} />\n`}</code></pre>\n    <p>{`And for a horizontal one.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Animated.ScrollView onScroll={onScrollEvent({ x: new Value(0) })} horizontal />\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"ongestureevent\"\n    }}><inlineCode parentName=\"h2\">{`onGestureEvent()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const onGestureEvent: (nativeEvent: Partial<Adaptable<GestureHandlerStateChangeNativeEvent & TapGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & LongPressGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & ForceTouchGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & PanGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & PinchGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & RotationGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & FlingGestureHandlerEventExtra>>) => {\n    onHandlerStateChange: (...args: any[]) => void;\n    onGestureEvent: (...args: any[]) => void;\n};\n`}</code></pre>\n    <p>{`Returns a reanimated event handler for any Gesture handler event handler.\nExample usage for a vertical `}<inlineCode parentName=\"p\">{`PanGestureHandler`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const translationX = new Value(0);\nconst state = new Value(State.UNDETERMINED);\nconst gestureHandler = onGestureEvent({ translationX, state });\nreturn <PanGestureHandler {...gestureHandler} />;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}