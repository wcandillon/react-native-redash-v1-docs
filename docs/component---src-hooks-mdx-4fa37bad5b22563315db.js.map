{"version":3,"sources":["webpack:///../src/hooks.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,+LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAGA,uBACA,qLACA,iBAAQ,CACN,GAAM,YACL,0BAAYC,WAAW,MAAvB,eACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4FAIL,qHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kCAIL,uBACA,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kGAIL,sHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gEAIL,uBACA,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4CAIL,0GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gCAIL,uBACA,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qEAIL,yGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qDAIL,uBACA,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yEAIL,wEAAuD,0BAAYA,WAAW,KAAvB,QAAvD,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+CAIL,uBACA,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,wBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wFAKL,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iMAUL,uBACA,iBAAQ,CACN,GAAM,wBACL,0BAAYA,WAAW,MAAvB,2BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mQAUL,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2QASL,uBACA,iBAAQ,CACN,GAAM,0BACL,0BAAYA,WAAW,MAAvB,6BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iOASL,uBACA,iBAAQ,CACN,GAAM,wBACL,0BAAYA,WAAW,MAAvB,2BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8LASL,uBACA,iBAAQ,CACN,GAAM,WACL,0BAAYA,WAAW,MAAvB,cACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8EAIL,8GACF,0BAAYA,WAAW,KAAvB,WADE,kCACoF,0BAAYA,WAAW,KAAvB,QADpF,+BAEA,kCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yHAML,uBACA,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0EAIL,kCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wD,6LAWTJ,EAAWK,gBAAiB","file":"component---src-hooks-mdx-4fa37bad5b22563315db.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/tmp/react-native-redash/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"hooks\"\n    }}>{`Hooks`}</h1>\n    <hr></hr>\n    <p>{`The hooks provided by redash are here so you can create animation values, clocks, and event nodes that will keep their identity across component re-renders.`}</p>\n    <h2 {...{\n      \"id\": \"usevalue\"\n    }}><inlineCode parentName=\"h2\">{`useValue()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useValue: <V extends string | number | boolean>(value: V) => Animated.Value<V>;\n`}</code></pre>\n    <p>{`Creates an animation value which identity is preserved during the whole component lifecycle.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const toggle = useValue(0);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usevalues\"\n    }}><inlineCode parentName=\"h2\">{`useValues()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useValues: <V extends string | number | boolean>(values: V[]) => Animated.Value<V>[];\n`}</code></pre>\n    <p>{`Creates an animation values which identity is preserved during the whole component lifecycle.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [toggle, state] = useValues(0, State.UNDETERMINED);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"useclock\"\n    }}><inlineCode parentName=\"h2\">{`useClock()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useClock: () => Animated.Clock;\n`}</code></pre>\n    <p>{`Creates a clock which identity is preserved during the whole component lifecycle.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const clock = useClock();\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"useclocks\"\n    }}><inlineCode parentName=\"h2\">{`useClocks()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useClocks: (numberOfClocks: number) => Animated.Clock[];\n`}</code></pre>\n    <p>{`Creates clocks which identity is preserved during the whole component lifecycle.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [clock1, clock2, clock3] = useClocks(3);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usevector\"\n    }}><inlineCode parentName=\"h2\">{`useVector()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useVector: (x: number, y: number) => Vector<Animated.Value>;\n`}</code></pre>\n    <p>{`Creates a vector which identity is preserved by `}<inlineCode parentName=\"p\">{`deps`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const vector = useVector(width, height);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usegesturehandler\"\n    }}><inlineCode parentName=\"h2\">{`useGestureHandler()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useGestureHandler = (\n  nativeEvent: Parameters<typeof onGestureEvent>[0])\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const state = useValue(State.UNDETERMINED);\nconst gestureHandler = useGestureHandler({ state });\nreturn (\n  <TapGestureHandler {...gestureHandler}>\n  //...\n  </TapGestureHandler>\n)\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usepangesturehandler\"\n    }}><inlineCode parentName=\"h2\">{`usePanGestureHandler()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const usePanGestureHandler = () => {\n  position: Vector<Animated.Value<number>>,\n  translation: Vector<Animated.Value<number>>,\n  velocity: Vector<Animated.Value<number>>,\n  state: Animated.Value<State>,\n  gestureHandler: Animated.Node<number>\n};\n`}</code></pre>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const {gestureHandler, state, translation} = usePanGestureHandler();\nreturn (\n  <PanGestureHandler {...gestureHandler}>\n    <Animated.View style={{ flex: 1, backgroundColor: \"cyan\", transform: [{ translateX: translation.x }] }} />\n  </PanGestureHandler>\n)\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usepinchgesturehandler\"\n    }}><inlineCode parentName=\"h2\">{`usePinchGestureHandler()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const {gestureHandler, state, scale, focal} = usePanGestureHandler();\nreturn (\n  <PinchGestureHandler {...gestureHandler}>\n    <Image style={{ transform: [{ scale }] }} {...{source}} />\n  </PinchGestureHandler>\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usetapgesturehandler\"\n    }}><inlineCode parentName=\"h2\">{`useTapGestureHandler()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const {gestureHandler, position, absolutePosition} = useTapGestureHandler();\nreturn (\n  <TapGestureHandler {...gestureHandler}>\n    <Text>Tap me!</Text>\n  </TapGestureHandler>\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usediff\"\n    }}><inlineCode parentName=\"h2\">{`useDiff()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useDiff: (node: Animated.Node<number>) => Animated.Value<number>;\n`}</code></pre>\n    <p>{`Returns a difference between the node value from the last frame and the current one.\n`}<inlineCode parentName=\"p\">{`useDiff`}</inlineCode>{` works for every frame whereas `}<inlineCode parentName=\"p\">{`diff`}</inlineCode>{` works on every evaluation.`}</p>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [state, x, y] = useValues(State.UNDETERMINED, 0, 0);\nconst deltaX = useDiff(x);\nconst deltaY = useDiff(y);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usedebug\"\n    }}><inlineCode parentName=\"h2\">{`useDebug()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useDebug: (values: { [key: string]: Animated.Node<number> });\n`}</code></pre>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`useDebug({\n  translateX,\n  translateY\n})\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}