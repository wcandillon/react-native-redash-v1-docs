{"version":3,"sources":["webpack:///../src/gestures.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,kMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAGA,uBACA,iBAAQ,CACN,GAAM,cACL,0BAAYC,WAAW,MAAvB,iBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+JAIL,iIACA,2BACA,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,sBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oKAIL,kKACyB,0BAAYA,WAAW,KAAvB,cADzB,2MAGA,uBACA,iBAAQ,CACN,GAAM,iBACL,0BAAYA,WAAW,MAAvB,oBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qLAOL,+EACA,qDAAoC,0BAAYA,WAAW,KAAvB,cAApC,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4EAIL,kDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uFAIL,uBACA,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,qBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0yBAOL,gIAC2B,0BAAYA,WAAW,KAAvB,qBAD3B,KAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2MAOL,uBACA,iBAAQ,CACN,GAAM,cACL,0BAAYA,WAAW,MAAvB,iBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+EAIL,2FAA0E,0BAAYA,WAAW,KAAvB,0BAA1E,0FAC2E,0BAAYA,WAAW,KAAvB,UAD3E,QACsI,0BAAYA,WAAW,KAAvB,UADtI,iCAEC,0BAAYA,WAAW,KAAvB,SAFD,kBAEqE,0BAAYA,WAAW,KAAvB,UAFrE,SAEiI,mBAAGA,WAAW,KAAQ,CACnJ,KAAQ,wEADqH,uEAFjI,KAKA,2BACA,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,kBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0HAIL,uFAAsE,0BAAYA,WAAW,KAAvB,cAAtE,MACA,2BACA,iBAAQ,CACN,GAAM,YACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uHAIL,4FAA2E,0BAAYA,WAAW,KAAvB,wBAA3E,iIAEA,2BACA,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,wBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uFAIL,2BACA,iBAAQ,CACN,GAAM,uBACL,0BAAYA,WAAW,MAAvB,0BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gFAIL,2BACA,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,wBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kG,gMAQTJ,EAAWK,gBAAiB","file":"component---src-gestures-mdx-bd556c33881c8ef195da.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/tmp/react-native-redash/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"gestures\"\n    }}>{`Gestures`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"withoffset\"\n    }}><inlineCode parentName=\"h2\">{`withOffset()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const withOffset: (value: Animated.Node<number>, state: Animated.Value<State>, offset?: Animated.Value<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Decorates animated value from the pan gesture handler so that its position is memorized accross touches.`}</p>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"withscaleoffset\"\n    }}><inlineCode parentName=\"h2\">{`withScaleOffset()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const withScaleOffset: (value: Animated.Node<number>, state: Animated.Value<State>, offset?: Animated.Value<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Decorates animated value from the pinch gesture handler so that its scale value is memorized accross touches.\nThis function differs from `}<inlineCode parentName=\"p\">{`withOffset`}</inlineCode>{` because it uses multiplication instead of additions.\nTranslations start from 0 and are added on top of each other whereas scale transformations start from 1 and are multiplied on top of each other.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"onscrollevent\"\n    }}><inlineCode parentName=\"h2\">{`onScrollEvent()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const onScrollEvent: (contentOffset: {\n    x?: Animated.Node<number> | undefined;\n    y?: Animated.Node<number> | undefined;\n}) => (...args: any[]) => void;\n`}</code></pre>\n    <p>{`Returns a reanimated event handler for the ScrollView.`}</p>\n    <p>{`Example usage for a vertical `}<inlineCode parentName=\"p\">{`ScrollView`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Animated.ScrollView onScroll={onScrollEvent({ y: new Value(0) })} />\n`}</code></pre>\n    <p>{`And for a horizontal one.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Animated.ScrollView onScroll={onScrollEvent({ x: new Value(0) })} horizontal />\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"ongestureevent\"\n    }}><inlineCode parentName=\"h2\">{`onGestureEvent()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const onGestureEvent: (nativeEvent: Partial<Adaptable<GestureHandlerStateChangeNativeEvent & TapGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & LongPressGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & ForceTouchGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & PanGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & PinchGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & RotationGestureHandlerEventExtra>> | Partial<Adaptable<GestureHandlerStateChangeNativeEvent & FlingGestureHandlerEventExtra>>) => {\n    onHandlerStateChange: (...args: any[]) => void;\n    onGestureEvent: (...args: any[]) => void;\n};\n`}</code></pre>\n    <p>{`Returns a reanimated event handler for any Gesture handler event handler.\nExample usage for a vertical `}<inlineCode parentName=\"p\">{`PanGestureHandler`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const translationX = new Value(0);\nconst state = new Value(State.UNDETERMINED);\nconst gestureHandler = onGestureEvent({ translationX, state });\nreturn <PanGestureHandler {...gestureHandler} />;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"pinchbegan\"\n    }}><inlineCode parentName=\"h2\">{`pinchBegan()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const pinchBegan: (state: Animated.Node<State>) => Animated.Node<1 | 0>;\n`}</code></pre>\n    <p>{`Returns one if the state of the gesture is BEGAN. Is equivalent to `}<inlineCode parentName=\"p\">{`eq(state, State.BEGAN)`}</inlineCode>{` on iOS.\nOn Android, this function takes into account a small inconsistency where the `}<inlineCode parentName=\"p\">{`focalX`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`focalY`}</inlineCode>{` values are not available\nat `}<inlineCode parentName=\"p\">{`BEGAN`}</inlineCode>{` but rather in `}<inlineCode parentName=\"p\">{`ACTIVE`}</inlineCode>{`. See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/kmagiera/react-native-gesture-handler/issues/553\"\n      }}>{`https://github.com/kmagiera/react-native-gesture-handler/issues/553`}</a>{`.`}</p>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"pinchactive\"\n    }}><inlineCode parentName=\"h2\">{`pinchActive()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const pinchActive:  (state: Animated.Node<State>, numberOfPointers: Animated.Node<number>) => Animated.Node<1 | 0>;\n`}</code></pre>\n    <p>{`Returns one if the gesture is active (and doesn't overlap with `}<inlineCode parentName=\"p\">{`pinchBegan`}</inlineCode>{`).`}</p>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"pinchend\"\n    }}><inlineCode parentName=\"h2\">{`pinchEnd()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const pinchEnd:  (state: Animated.Node<State>, numberOfPointers: Animated.Node<number>) => Animated.Node<1 | 0>;\n`}</code></pre>\n    <p>{`Returns one if the gesture has ended. On iOS, this is equivalent to `}<inlineCode parentName=\"p\">{`eq(state, State.END)`}</inlineCode>{`.\nOn Android, this function returns 1 if the gesture has ended or if it is active but the number of pointers is less than 2.`}</p>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"pangesturehandler\"\n    }}><inlineCode parentName=\"h2\">{`panGestureHandler()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const panGestureHandler = () => { gestureHandler, translation, velocity, state }\n`}</code></pre>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"pinchgesturehandler\"\n    }}><inlineCode parentName=\"h2\">{`pinchGestureHandler()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const pinchGestureHandler = () => { gestureHandler, scale, focal, state }\n`}</code></pre>\n    <p>{`--`}</p>\n    <h2 {...{\n      \"id\": \"tapgesturehandler\"\n    }}><inlineCode parentName=\"h2\">{`tapGestureHandler()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const tapGestureHandler = () => { gestureHandler, state, position, absolutePosition }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}