(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{Qf1I:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return s}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var a=t("/FXl"),r=t("TjRS");t("aD51");function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/animations.mdx"}});var b={_frontmatter:i},l=r.a;function s(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,["components"]);return Object(a.b)(l,o({},b,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"animations"},"Animations"),Object(a.b)("hr",null),Object(a.b)("h2",{id:"mix"},Object(a.b)("inlineCode",{parentName:"h2"},"mix()")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"const mix: (value: Animated.Adaptable<number>, x: Animated.Adaptable<number>, y: Animated.Adaptable<number>) => Animated.Node<number>;\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"mix()")," performs a linear interpolation between x and y using a to weight between them. The return value is computed as ",Object(a.b)("inlineCode",{parentName:"p"},"x * (1 - value) + y * value"),"."),Object(a.b)("hr",null),Object(a.b)("h2",{id:"tween2d"},Object(a.b)("inlineCode",{parentName:"h2"},"tween2d()")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"const tween2d: (value: Animated.Adaptable<number>, src: Transform2d, dst: Transform2d) => Transform2d;\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"tween2d()")," interpolates from any 2d transformation to any other 2d transformation."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"const src = [\n  { rotateZ: Math.PI / 2}\n  { scale: 0.5 }\n];\nconst dst = [\n  { skewX: Math.PI / 6 }\n];\nconst progress = useLoop(1000);\nconst transform = tween2d(progress, src, dst);\nreturn (\n  <Animated.View style={{ transform }}>\n    <Card type={Cards.Card1} />\n  </Animated.View>\n)\n")),Object(a.b)("hr",null),Object(a.b)("h2",{id:"snappoint"},Object(a.b)("inlineCode",{parentName:"h2"},"snapPoint()")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"const snapPoint: (value: Animated.Adaptable<number>, velocity: Animated.Adaptable<number>, points: Animated.Adaptable<number>[]) => Animated.Adaptable<number>;\n")),Object(a.b)("p",null,"Select a point based on a node value and its velocity."))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/animations.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-animations-mdx-f1fe7143f628c3fbae91.js.map