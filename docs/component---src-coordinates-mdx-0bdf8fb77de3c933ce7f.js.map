{"version":3,"sources":["webpack:///../src/coordinates.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,0JACA,mDAAkC,0BAAYC,WAAW,KAAvB,KAAlC,QAAwF,0BAAYA,WAAW,KAAvB,KAAxF,qFAA2N,0BAAYA,WAAW,KAAvB,WAA3N,QAAuR,0BAAYA,WAAW,KAAvB,WAAvR,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uLAUL,iBAAQ,CACN,GAAM,cADR,cAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+NAYL,uBACA,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,uBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qJAOL,uBACA,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,uBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qJAOL,uBACA,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,sBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8IAOL,uBACA,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,sBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mJAOL,uBACA,iBAAQ,CACN,GAAM,gBACL,0BAAYA,WAAW,MAAvB,mBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+JAOL,iBAAQ,CACN,GAAM,gBACL,0BAAYA,WAAW,MAAvB,mBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2J,4LAWTJ,EAAWK,gBAAiB","file":"component---src-coordinates-mdx-0bdf8fb77de3c933ce7f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/react-native-redash/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"coordinates\"\n    }}>{`Coordinates`}</h1>\n    <p>{`In order to easily build certain types of animations, it can be extremely useful to switch from one coordinate system to another.`}</p>\n    <p>{`For instance, to convert a `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`y`}</inlineCode>{` coordinate from the React Native canvas to a polar coordinate system centered at `}<inlineCode parentName=\"p\">{`x = 100`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`y = 100`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const x = 0;\nconst y = 100;\nconst center = { x: 100, y: 100 };\nconst {theta, radius} = cartesian2Polar(\n  canvas2Cartesian({ x, y }, center)\n);\n// theta is Ï€, radius: 100\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export interface Point {\n    x: Animated.Adaptable<number>;\n    y: Animated.Adaptable<number>;\n}\n\nexport interface PolarPoint {\n    theta: Animated.Adaptable<number>;\n    radius: Animated.Adaptable<number>;\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"canvas2cartesian\"\n    }}><inlineCode parentName=\"h2\">{`canvas2Cartesian()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const canvas2Cartesian: ({ x, y }: Point, center: Point) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"cartesian2canvas\"\n    }}><inlineCode parentName=\"h2\">{`cartesian2Canvas()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const cartesian2Canvas: ({ x, y }: Point, center: Point) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"cartesian2polar\"\n    }}><inlineCode parentName=\"h2\">{`cartesian2Polar()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const cartesian2Polar: ({ x, y }: Point) => {\n    theta: Animated.Node<number>;\n    radius: Animated.Node<number>;\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"polar2cartesian\"\n    }}><inlineCode parentName=\"h2\">{`polar2Cartesian()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const polar2Cartesian: ({ theta, radius }: PolarPoint) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"polar2canvas\"\n    }}><inlineCode parentName=\"h2\">{`polar2Canvas()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const polar2Canvas: ({ theta, radius }: PolarPoint, center: Point) => {\n    x: Animated.Node<number>;\n    y: Animated.Node<number>;\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"canvas2polar\"\n    }}><inlineCode parentName=\"h2\">{`canvas2Polar()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const canvas2Polar: ({ x, y }: Point, center: Point) => {\n    theta: Animated.Node<number>;\n    radius: Animated.Node<number>;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}