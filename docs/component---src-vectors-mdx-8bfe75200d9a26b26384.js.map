{"version":3,"sources":["webpack:///../src/vectors.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,iMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,uBACA,iBAAQ,CACN,GAAM,gBACL,0BAAYC,WAAW,MAAvB,mBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yHAOL,uBACA,iBAAQ,CACN,GAAM,UACL,0BAAYA,WAAW,MAAvB,WACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8qB,wLA8BTJ,EAAWK,gBAAiB","file":"component---src-vectors-mdx-8bfe75200d9a26b26384.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/react-native-redash/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"vectors\"\n    }}>{`Vectors`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"createvector\"\n    }}><inlineCode parentName=\"h2\">{`createVector()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const createVector: (x: number, y: number) => {\n    x: Animated.Value<number>;\n    y: Animated.Value<number>;\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"vector\"\n    }}><inlineCode parentName=\"h2\">{`Vector`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const Vector: {\n    invert: (a: Vector) => {\n        x: Animated.Node<number>;\n        y: Animated.Node<number>;\n    };\n    add: (a: Vector, b: Vector) => {\n        x: Animated.Node<number>;\n        y: Animated.Node<number>;\n    };\n    sub: (a: Vector, b: Vector) => {\n        x: Animated.Node<number>;\n        y: Animated.Node<number>;\n    };\n    multiply: (a: Vector, b: Vector) => {\n        x: Animated.Node<number>;\n        y: Animated.Node<number>;\n    };\n    divide: (a: Vector, b: Vector) => {\n        x: Animated.Node<number>;\n        y: Animated.Node<number>;\n    };\n    set: (a: VectorValue, b: Vector) => Animated.Node<number>;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}