{"version":3,"sources":["webpack:///../src/animations.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,oMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,uBACA,iBAAQ,CACN,GAAM,OACL,0BAAYC,WAAW,MAAvB,UACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6IAIL,qBAAG,0BAAYA,WAAW,KAAvB,SAAH,oHAAyK,0BAAYA,WAAW,KAAvB,+BAAzK,KACA,uBACA,iBAAQ,CACN,GAAM,WACL,0BAAYA,WAAW,MAAvB,cACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6GAIL,qBAAG,0BAAYA,WAAW,KAAvB,aAAH,4EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8SAiBL,uBACA,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sKAIL,qF,kMAKJJ,EAAWK,gBAAiB","file":"component---src-animations-mdx-f1fe7143f628c3fbae91.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/react-native-redash/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"animations\"\n    }}>{`Animations`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"mix\"\n    }}><inlineCode parentName=\"h2\">{`mix()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const mix: (value: Animated.Adaptable<number>, x: Animated.Adaptable<number>, y: Animated.Adaptable<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`mix()`}</inlineCode>{` performs a linear interpolation between x and y using a to weight between them. The return value is computed as `}<inlineCode parentName=\"p\">{`x * (1 - value) + y * value`}</inlineCode>{`.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"tween2d\"\n    }}><inlineCode parentName=\"h2\">{`tween2d()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const tween2d: (value: Animated.Adaptable<number>, src: Transform2d, dst: Transform2d) => Transform2d;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`tween2d()`}</inlineCode>{` interpolates from any 2d transformation to any other 2d transformation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const src = [\n  { rotateZ: Math.PI / 2}\n  { scale: 0.5 }\n];\nconst dst = [\n  { skewX: Math.PI / 6 }\n];\nconst progress = useLoop(1000);\nconst transform = tween2d(progress, src, dst);\nreturn (\n  <Animated.View style={{ transform }}>\n    <Card type={Cards.Card1} />\n  </Animated.View>\n)\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"snappoint\"\n    }}><inlineCode parentName=\"h2\">{`snapPoint()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const snapPoint: (value: Animated.Adaptable<number>, velocity: Animated.Adaptable<number>, points: Animated.Adaptable<number>[]) => Animated.Adaptable<number>;\n`}</code></pre>\n    <p>{`Select a point based on a node value and its velocity.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}