{"version":3,"sources":["webpack:///../src/transformations.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,yMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBACA,iBAAQ,CACN,GAAM,cACL,0BAAYC,WAAW,MAAvB,iBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6IAML,kLAEiB,0BAAYA,WAAW,KAAvB,aAFjB,KAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4HAOL,uBACA,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,sBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gHAIL,mEACA,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uFAQL,uBACA,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,uBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yYAeL,wKAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2MAUL,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,kBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oEAIL,gFAA+D,0BAAYA,WAAW,KAAvB,oCAA/D,mCAEA,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sZAqBL,kDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mhBAyBL,uBACA,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,uBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2JAIL,yGAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wHAQL,6CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gIAOL,uBACA,iBAAQ,CACN,GAAM,qBACL,0BAAYA,WAAW,MAAvB,wBACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6JAIL,0GAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yHAQL,6CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mI,gMAWTJ,EAAWK,gBAAiB","file":"component---src-transformations-mdx-0175b5c1fefedfa0aedd.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/react-native-redash/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"transformations\"\n    }}>{`Transformations`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"translatez\"\n    }}><inlineCode parentName=\"h2\">{`translateZ()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const translateZ: (perspective: Animated.Adaptable<number>, z: Animated.Adaptable<number>) => {\n    scale: Animated.Node<number>;\n};\n`}</code></pre>\n    <p>{`Convert a translateZ transformation into a scale transformation.\nThis function only works if there are no transformations of origin.\nExample usage with `}<inlineCode parentName=\"p\">{`transform`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const perspective = 800;\nconst z = new Value(100);\n//...\ntransform: [{ perspective }, translateZ(perspective, z)];\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"transformorigin\"\n    }}><inlineCode parentName=\"h2\">{`transformOrigin()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const transformOrigin: ({ x, y }: Point, ...transformations: AnimatedTransform[]) => AnimatedTransform[];\n`}</code></pre>\n    <p>{`Changes the origin of the transformations.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<View\n  style={{\n    transform: transformOrigin(cx, cy, { rotateX })\n  }}\n/>\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"processtransform\"\n    }}><inlineCode parentName=\"h2\">{`processTransform()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface AnimatedTransform2d {\n  scale: Animated.Node<number>;\n  scaleX: Animated.Node<number>;\n  scaleY: Animated.Node<number>;\n  skewX: Animated.Node<number>;\n  skewY: Animated.Node<number>;\n  translateX: Animated.Node<number>;\n  translateY: Animated.Node<number>;\n  rotateZ: Animated.Node<number>;\n}\n\nconst processTransform: (transform: AnimatedTransform2d[]) => Matrix3;\n`}</code></pre>\n    <p>{`Given a set of 2d transformations, a 3x3 matrix of animated nodes.\nThe Matrix is are formated using the row-major-indices.\nSee example below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const m = processTransform([\n  { translateX: 100 },\n  { translateX: -CARD_WIDTH / 2 },\n  { rotateZ: -Math.PI / 6 },\n  { translateX: CARD_WIDTH / 2 },\n]);\nconst [tx, ty] = [m[0][2], m[1][2]];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"decompose2d\"\n    }}><inlineCode parentName=\"h2\">{`decompose2d()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const decompose2d: (matrix3: Matrix3) => AnimatedTransform2d;\n`}</code></pre>\n    <p>{`Given any 3x3 matrix, this function decompose it into a `}<inlineCode parentName=\"p\">{`translate, rotate, scale, rotate`}</inlineCode>{` transform.\nSee example below.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { rotateZ, translateX, translateY, skewX, scaleX, scaleY } = decompose2d(processTransform([\n  [1.25, tan(Math.PI/12), 50],\n  [tan(Math.PI/12), 1.25, 50],\n  [0, 0, 1]\n]));\nconst transform = [\n  { translateX },\n  { translateY },\n  { rotateZ: skewX },\n  { scaleX },\n  { scaleY },\n  { rotateZ }\n]\nreturn (\n  <Animated.View style={{ transform }}>\n    <Card />\n  </Animated.View>\n);\n`}</code></pre>\n    <p>{`Example with decompose2d:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { rotateZ, translateX, translateY, skewX, scaleX, scaleY } = decompose2d(processTransform([\n  { translateX: 100 },\n  { translateX: -CARD_WIDTH / 2 },\n  { rotateZ: -Math.PI / 6 },\n  { translateX: CARD_WIDTH / 2 },\n  { skewX: -Math.PI / 9 },\n  { scale: 1.25 },\n  { skewY: -Math.PI / 12 },\n]));\nconst transform = [\n  { translateX },\n  { translateY },\n  { rotateZ: skewX },\n  { scaleX },\n  { scaleY },\n  { rotateZ }\n]\nreturn (\n  <Animated.View style={{ transform }}>\n    <Card />\n  </Animated.View>\n);\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"scaletranslation\"\n    }}><inlineCode parentName=\"h2\">{`scaleTranslation()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const scaleTranslation: (tr: Vector<Animated.Adaptable<number>>, scale: Animated.Adaptable<number>) => Vector<Animated.Node<number>>;\n`}</code></pre>\n    <p>{`Scale a translation vector. Useful to accumulate transformations.\nFor instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`transform: [\n  ...translate(vec.add(translation, origin)),\n  { scale },\n  ...translate(vec.dot(-1, origin))\n]\n`}</code></pre>\n    <p>{`Can be rewritten to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`transform: [\n  ...translate(vec.add(translation, origin, scaleTranslation(vec.dot(-1, origin), scale))),\n  { scale }\n]\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"rotatetranslation\"\n    }}><inlineCode parentName=\"h2\">{`rotateTranslation()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export declare const rotateTranslation: (tr: Vector<Animated.Adaptable<number>>, rotate: Animated.Adaptable<number>) => Vector<Animated.Node<number>>;\n`}</code></pre>\n    <p>{`Rotate a translation vector. Useful to accumulate transformations.\nFor instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`transform: [\n  ...translate(vec.add(translation, origin)),\n  { rotate },\n  ...translate(vec.dot(-1, origin))\n]\n`}</code></pre>\n    <p>{`Can be rewritten to:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`transform: [\n  ...translate(vec.add(translation, origin, rotateTranslation(vec.dot(-1, origin), scale))),\n  { rotate }\n]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}