(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{hN3V:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return b}));t("4cIV"),t("NZyX"),t("c0Gx"),t("QNbk"),t("+ytS"),t("WY76");var r=t("V0Ug"),a=t("sN0p");t("xH0s");function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/strings.mdx"}});var o={_frontmatter:s},c=a.a;function b(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(c,i({},o,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"strings"},"Strings"),Object(r.b)("hr",null),Object(r.b)("h2",{id:"retext"},Object(r.b)("inlineCode",{parentName:"h2"},"<ReText>")),Object(r.b)("p",null,"This component is like ",Object(r.b)("inlineCode",{parentName:"p"},"<Text>")," but accepts a string animation node as property.\nBehind the scene, ",Object(r.b)("inlineCode",{parentName:"p"},"<ReText>")," is using ",Object(r.b)("inlineCode",{parentName:"p"},"<TextInput>")," with some default styling.\nTherefore there might be some slight inconsistencies with ",Object(r.b)("inlineCode",{parentName:"p"},"<Text>"),"."),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-tsx"}),'() => {\n  const price = new Value(42);\n  return (\n    <ReText\n      text={concat("$ ", price)}\n      style={{ color: "black", fontVariant: ["tabular-nums"] }}\n    />\n  )\n}\n')),Object(r.b)("h2",{id:"string"},Object(r.b)("inlineCode",{parentName:"h2"},"string()")),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-tsx"}),"const string: (strings: readonly string[], ...values: readonly (string | number | Animated.Node<number> | readonly (number | Animated.Node<number> | readonly (number | Animated.Node<number>)[])[] | Animated.Node<string> | readonly (string | Animated.Node<string> | readonly (string | Animated.Node<string>)[])[])[]) => Animated.Node<string>;\n")),Object(r.b)("p",null,"Tagged template for animated string values."),Object(r.b)("pre",null,Object(r.b)("code",i({parentName:"pre"},{className:"language-tsx"}),"const { x, y } = { x: new Value(0), y: new Value(0) };\nconst d = string`M0,0 ${x},${y}`;\nreturn <AnimatedPath {...{ d }} />;\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/strings.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-strings-mdx-e616d22b145371fbf108.js.map