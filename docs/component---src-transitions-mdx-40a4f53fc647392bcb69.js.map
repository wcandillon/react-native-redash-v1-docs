{"version":3,"sources":["webpack:///../src/transitions.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,8OAEkE,0BAAYC,WAAW,KAAvB,yBAFlE,OAE2I,0BAAYA,WAAW,KAAvB,yBAF3I,mDAG2C,0BAAYA,WAAW,KAAvB,0BAH3C,OAGqH,0BAAYA,WAAW,KAAvB,0BAHrH,KAIA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,QAEX,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,qBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,UADX,uBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,yBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,UADX,2BAIF,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,UAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,WADX,yBAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,UADX,6BAMN,iBAAQ,CACN,GAAM,kCADR,kCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4MASL,iBAAQ,CACN,GAAM,6CADR,6CAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wMASL,uBACA,iBAAQ,CACN,GAAM,uBACL,0BAAYA,WAAW,MAAvB,0BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2JAIL,uBACA,iBAAQ,CACN,GAAM,uBACL,0BAAYA,WAAW,MAAvB,0BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iPAIL,uBACA,iBAAQ,CACN,GAAM,wBACL,0BAAYA,WAAW,MAAvB,2BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6MAIL,uBACA,iBAAQ,CACN,GAAM,wBACL,0BAAYA,WAAW,MAAvB,2BACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2U,4LAQTJ,EAAWK,gBAAiB","file":"component---src-transitions-mdx-40a4f53fc647392bcb69.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/react-native-redash/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"transitions\"\n    }}>{`Transitions`}</h1>\n    <p>{`Transitions are essential to the user experience.\nRedash offers four utility functions for transitions which are broke down in the table below.\nIf you want to build a transition based on a React state change use `}<inlineCode parentName=\"p\">{`useTimingTransition()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`useSpringTransition()`}</inlineCode>{`.\nTo transition an animation value change, use `}<inlineCode parentName=\"p\">{`withTimingTransition()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`withSpringTransition()`}</inlineCode>{`.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`State (JS Thread)`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Value (UI Thread)`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Timing`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`useTimingTransition()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`withTimingTransition()`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Spring`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`useSpringTransition()`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`withSpringTransition()`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"attach-a-transition-to-a-state\"\n    }}>{`Attach a transition to a state`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {useTimingTransition} from \"react-native-redash\";\n\nconst Toggle = () => {\n  const [open, setOpen] = useState(false);\n  const transition = useTimingTransition(open, { duration: 400 });\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"attach-a-transition-to-an-animation-value\"\n    }}>{`Attach a transition to an animation value`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {withTimingTransition} from \"react-native-redash\";\n\nconst Toggle = () => {\n  const open = new Value<number>(0);\n  const transition = withTimingTransition(open, { duration: 400 });\n}\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usetimingtransition\"\n    }}><inlineCode parentName=\"h2\">{`useTimingTransition()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useTimingTransition: (state: number | boolean, config?: Partial<Pick<Animated.TimingConfig, \"duration\" | \"easing\">>) => Animated.Node<number>;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"usespringtransition\"\n    }}><inlineCode parentName=\"h2\">{`useSpringTransition()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const useSpringTransition: (state: number | boolean, config?: Partial<Pick<Animated.SpringConfig, \"damping\" | \"mass\" | \"stiffness\" | \"overshootClamping\" | \"restSpeedThreshold\" | \"restDisplacementThreshold\">>) => Animated.Node<number>;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"withtimingtransition\"\n    }}><inlineCode parentName=\"h2\">{`withTimingTransition()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const withTimingTransition: (value: Animated.Node<number>, timingConfig?: Partial<Pick<Animated.TimingConfig, \"duration\" | \"easing\">>, gestureState?: Animated.Value<State>) => Animated.Node<number>;\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"withspringtransition\"\n    }}><inlineCode parentName=\"h2\">{`withSpringTransition()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const withSpringTransition: (value: Animated.Node<number>, springConfig?: Partial<Pick<Animated.SpringConfig, \"damping\" | \"mass\" | \"stiffness\" | \"overshootClamping\" | \"restSpeedThreshold\" | \"restDisplacementThreshold\">>, velocity?: Animated.Adaptable<number>, gestureState?: Animated.Value<State>) => Animated.Node<number>;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}