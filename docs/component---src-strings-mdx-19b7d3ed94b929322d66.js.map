{"version":3,"sources":["webpack:///../src/strings.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,iMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,uBACA,iBAAQ,CACN,GAAM,UACL,0BAAYC,WAAW,MAAvB,aACH,+CAA8B,0BAAYA,WAAW,KAAvB,UAA9B,wEACgB,0BAAYA,WAAW,KAAvB,YADhB,aACkF,0BAAYA,WAAW,KAAvB,eADlF,0FAEwD,0BAAYA,WAAW,KAAvB,UAFxD,KAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0LAYL,iBAAQ,CACN,GAAM,UACL,0BAAYA,WAAW,MAAvB,aACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4VAIL,oEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2I,+LAUTJ,EAAWK,gBAAiB","file":"component---src-strings-mdx-19b7d3ed94b929322d66.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/tmp/react-native-redash/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"strings\"\n    }}>{`Strings`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"retext\"\n    }}><inlineCode parentName=\"h2\">{`<ReText>`}</inlineCode></h2>\n    <p>{`This component is like `}<inlineCode parentName=\"p\">{`<Text>`}</inlineCode>{` but accepts a string animation node as property.\nBehind the scene, `}<inlineCode parentName=\"p\">{`<ReText>`}</inlineCode>{` is using `}<inlineCode parentName=\"p\">{`<TextInput>`}</inlineCode>{` with some default styling.\nTherefore there might be some slight inconsistencies with `}<inlineCode parentName=\"p\">{`<Text>`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`() => {\n  const price = new Value(42);\n  return (\n    <ReText\n      text={concat(\"$ \", price)}\n      style={{ color: \"black\", fontVariant: [\"tabular-nums\"] }}\n    />\n  )\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"string\"\n    }}><inlineCode parentName=\"h2\">{`string()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const string: (strings: readonly string[], ...values: readonly (string | number | Animated.Node<number> | readonly (number | Animated.Node<number> | readonly (number | Animated.Node<number>)[])[] | Animated.Node<string> | readonly (string | Animated.Node<string> | readonly (string | Animated.Node<string>)[])[])[]) => Animated.Node<string>;\n`}</code></pre>\n    <p>{`Tagged template for animated string values.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { x, y } = { x: new Value(0), y: new Value(0) };\nconst d = string\\`M0,0 \\${x},\\${y}\\`;\nreturn <AnimatedPath {...{ d }} />;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}