{"version":3,"sources":["webpack:///../src/math.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-math-mdx-ce97073fa9b770374a6f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/wcandillon/tmp/tmp/react-native-redash/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"math\"\n    }}>{`Math`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"bin\"\n    }}><inlineCode parentName=\"h2\">{`bin()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const bin: (value: boolean) => 0 | 1\n`}</code></pre>\n    <p>{`Convert a boolean value into a number.\nThis can be useful in reanimated since 0 and 1 are used for conditional statements.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"fract\"\n    }}><inlineCode parentName=\"h2\">{`fract()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const fract: (x: Animated.Adaptable<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`fract`}</inlineCode>{` returns the fractional part of `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{`. This is calculated as `}<inlineCode parentName=\"p\">{`x - floor(x)`}</inlineCode>{`.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"inc\"\n    }}><inlineCode parentName=\"h2\">{`inc()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const inc: (value: Animated.Value<number>) => Animated.Node<number>\n`}</code></pre>\n    <p>{`Increment value by one.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"dec\"\n    }}><inlineCode parentName=\"h2\">{`dec()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const dec: (value: Animated.Value<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Decrement value by one.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"torad\"\n    }}><inlineCode parentName=\"h2\">{`toRad()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const toRad: (deg: Animated.Adaptable<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Transforms an angle from degrees to radians.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"todeg\"\n    }}><inlineCode parentName=\"h2\">{`toDeg()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const toDeg: (rad: Animated.Adaptable<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Transforms an angle from radians to degrees.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"min\"\n    }}><inlineCode parentName=\"h2\">{`min()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const min: (...args: Animated.Adaptable<number>[]) => Animated.Adaptable<number>;\n`}</code></pre>\n    <p>{`Takes one or more nodes as input and returns the minimum of all the node's values.\nThis is equivalent to `}<inlineCode parentName=\"p\">{`Animated.min`}</inlineCode>{` but with support for more than two parameters.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"max\"\n    }}><inlineCode parentName=\"h2\">{`max()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const max: (...args: Animated.Adaptable<number>[]) => Animated.Adaptable<number>;\n`}</code></pre>\n    <p>{`Takes one or more nodes as input and returns the maximum of all the node's values.\nThis is equivalent to `}<inlineCode parentName=\"p\">{`Animated.min`}</inlineCode>{` but with support for more than two parameters.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"clamp\"\n    }}><inlineCode parentName=\"h2\">{`clamp()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const clamp: (value: Animated.Adaptable<number>, lowerBound: Animated.Adaptable<number>, upperBound: Animated.Adaptable<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Clamps a node with a lower and upper bound.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`clamp(new Value(-1), 0, 100); // 0\nclamp(new Value(1), 0, 100); // 1\nclamp(new Value(101), 0, 100); // 100\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"between\"\n    }}><inlineCode parentName=\"h2\">{`between()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const between: (value: Animated.Node<number>, lowerBound: Animated.Adaptable<number>, upperBound: Animated.Adaptable<number>, inclusive?: boolean) => Animated.Node<0 | 1>;\n`}</code></pre>\n    <p>{`Returns true if `}<inlineCode parentName=\"p\">{`node`}</inlineCode>{` is within `}<inlineCode parentName=\"p\">{`lowerBound`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`upperBound`}</inlineCode>{`.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"approximates\"\n    }}><inlineCode parentName=\"h2\">{`approximates()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const approximates: (a: Animated.Adaptable<number>, b: Animated.Adaptable<number>, precision?: Animated.Adaptable<number>) => Animated.Node<0 | 1>;\n`}</code></pre>\n    <p>{`Returns 1 if the difference between the two values is less than precision.\nOtherwise returns 0.\nDefault value for the precision is 0.001.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"atan2\"\n    }}><inlineCode parentName=\"h2\">{`atan2()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const atan2: (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), `}<inlineCode parentName=\"p\">{`atan2(y,x)`}</inlineCode>{`.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"round\"\n    }}><inlineCode parentName=\"h2\">{`round()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const round = (value: Animated.Adaptable<number>, precision: Animated.Adaptable<number> = 0)  => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Computes animation node rounded to `}<inlineCode parentName=\"p\">{`precision`}</inlineCode>{`.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"cubicbezier\"\n    }}><inlineCode parentName=\"h2\">{`cubicBezier()`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const cubicBezier: (t: Animated.Adaptable<number>, p0: Animated.Adaptable<number>, p1: Animated.Adaptable<number>, p2: Animated.Adaptable<number>, p3: Animated.Adaptable<number>) => Animated.Node<number>;\n`}</code></pre>\n    <p>{`Returns the coordinate of a cubic bezier curve.\n`}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` is the length of the curve from 0 to 1. `}<inlineCode parentName=\"p\">{`cubicBezier(0, p0, p1, p2, p3)`}</inlineCode>{` equals `}<inlineCode parentName=\"p\">{`p0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`cubicBezier(1, p0, p1, p2, p3)`}</inlineCode>{` equals `}<inlineCode parentName=\"p\">{`p3`}</inlineCode>{`.\n`}<inlineCode parentName=\"p\">{`p0`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`p3`}</inlineCode>{` are respectively the starting and ending point of the curve.\n`}<inlineCode parentName=\"p\">{`p1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`p2`}</inlineCode>{` are the control points.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}